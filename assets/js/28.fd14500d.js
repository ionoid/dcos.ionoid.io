(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{376:function(e,t,s){"use strict";s.r(t);var a=s(46),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"debug-iot-devices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debug-iot-devices"}},[e._v("#")]),e._v(" Debug IoT Devices")]),e._v(" "),s("p",[e._v("Sometimes it may be necessary to debug a device if contains errors. You can of\ncourse use the "),s("a",{attrs:{href:"#use-the-dashboard-device-information"}},[e._v("Ionoid.io dashboard to view some informations\n")]),e._v(" about the device,\nincluding errors outputs. In the case where the Ionoid.io dashboard information\nis not enough to locate the failure, you may have to "),s("a",{attrs:{href:"#connect-to-the-device-via-ssh"}},[e._v("connect to the device via\nssh")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"use-the-dashboard-device-information"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#use-the-dashboard-device-information"}},[e._v("#")]),e._v(" Use the Dashboard Device Information")]),e._v(" "),s("p",[e._v("Go to "),s("the-device-details-page"),e._v(" and lookup for the following information:")],1),e._v(" "),s("ul",[s("li",[e._v("Status and last time seen")]),e._v(" "),s("li",[e._v("Device operating system versions")]),e._v(" "),s("li",[e._v("Device SealOS Manager version")]),e._v(" "),s("li",[e._v("Device Systemd version")]),e._v(" "),s("li",[e._v("Device Docker version")]),e._v(" "),s("li",[e._v("Error logs (if any)")])]),e._v(" "),s("h2",{attrs:{id:"connect-to-the-device-via-ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-the-device-via-ssh"}},[e._v("#")]),e._v(" Connect to the Device via SSH")]),e._v(" "),s("p",[e._v("You first need to get an address to which you will open a SSH session. For\nthat, you have two options:")]),e._v(" "),s("ol",[s("li",[e._v("Either "),s("a",{attrs:{href:"#get-the-local-ip-address"}},[e._v("get the local IP address")]),e._v(" of your device, you need\nto be connected on the same\n"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/LAN",target:"_blank",rel:"noopener noreferrer"}},[e._v("local area network (LAN)"),s("OutboundLink")],1),e._v(" to be able to\nconnect to the device via this IP address")]),e._v(" "),s("li",[e._v("Or "),s("a",{attrs:{href:"#get-the-public-url"}},[e._v("get the public URL")]),e._v(" of your device, to which you can\nopen a SSH session from anywhere")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("If you are on Windows, you need first to download a SSH client like "),s("a",{attrs:{href:"https://www.putty.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Putty\n"),s("OutboundLink")],1)])]),e._v(" "),s("h3",{attrs:{id:"_1-get-the-local-ip-address"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-get-the-local-ip-address"}},[e._v("#")]),e._v(" 1. Get the Local IP Address")]),e._v(" "),s("h4",{attrs:{id:"using-the-dashboard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-the-dashboard"}},[e._v("#")]),e._v(" Using the dashboard")]),e._v(" "),s("p",[e._v("Go to "),s("the-device-details-page"),e._v(" and scroll to the bottom, then click on the\n"),s("strong",[e._v("NETWORKS")]),e._v(" tab. You will see the local IP address of the device in the\n"),s("strong",[e._v("Network Interfaces, IP Addresses")]),e._v(" section:")],1),e._v(" "),s("p",[s("img",{attrs:{src:"/steps/debug-iot-devices/get-local-ip.png",alt:"Get Local IP"}})]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("You can make sure that you are connected to the same local area network of the\ndevice by looking at the "),s("strong",[e._v("Conncted Networks")]),e._v(" section:")]),e._v(" "),s("p",[s("img",{attrs:{src:"/steps/debug-iot-devices/get-connected-network.png",alt:"Get Connected Network"}})])]),e._v(" "),s("h4",{attrs:{id:"using-a-network-scan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-a-network-scan"}},[e._v("#")]),e._v(" Using a network scan")]),e._v(" "),s("p",[s("strong",[e._v("TODO")])]),e._v(" "),s("h3",{attrs:{id:"_2-get-the-public-url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-get-the-public-url"}},[e._v("#")]),e._v(" 2. Get the Public URL")]),e._v(" "),s("p",[e._v("Go to "),s("the-device-details-page"),e._v(" and scroll to the bottom, then click on the\n"),s("em",[e._v("DETAILS")]),e._v(" tab. On the "),s("em",[e._v("Device Public URL")]),e._v(" section, check the checkbox to turn\nthe public URL of the device on. Then, copy the displayed public URL.")],1),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("This option is not yet available for all users.")])]),e._v(" "),s("h3",{attrs:{id:"connect-to-the-device"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-the-device"}},[e._v("#")]),e._v(" Connect to the Device")]),e._v(" "),s("p",[e._v("Once you got the local IP address, or the public URL of the device, use the\nfollowing command to connect to it via SSH. In this command we suppose that the\nyou want to use the local IP address that is "),s("code",[e._v("192.168.1.122")]),e._v(", and that the user\nwith which you want to connect is "),s("code",[e._v("pi")]),e._v(" (which is the default user on Raspberry\nPi devices, this can also be "),s("code",[e._v("root")]),e._v(" or any other user you created on the device):")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" pi@192.168.1.22\n")])])]),s("p",[e._v("Provide the user password (which is by default "),s("code",[e._v("raspberry")]),e._v(" for the "),s("code",[e._v("pi")]),e._v(" user on\nRaspberry Pi devices), and you should be logged in via SSH if the device is\nstill online.")]),e._v(" "),s("h2",{attrs:{id:"connect-to-the-device-via-serial-communication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect-to-the-device-via-serial-communication"}},[e._v("#")]),e._v(" Connect to the Device Via Serial Communication")]),e._v(" "),s("p",[e._v("If for one reason or another, you can't connect to the device via a network,\nyou can use a USB cable to associate the micro USB port on device to\nthe upstream USB port on your computer.")]),e._v(" "),s("h3",{attrs:{id:"raspbian-serial-communication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raspbian-serial-communication"}},[e._v("#")]),e._v(" Raspbian Serial Communication")]),e._v(" "),s("p",[e._v("If you are using Raspbian as an operating system, please follow these instructions:")]),e._v(" "),s("ul",[s("li",[e._v("On your computer, install "),s("a",{attrs:{href:"https://linux.die.net/man/1/minicom",target:"_blank",rel:"noopener noreferrer"}},[e._v("minicom"),s("OutboundLink")],1),e._v(" or any\nother serial communication program")]),e._v(" "),s("li",[e._v("Add your current user to the dialout group to be able to open the serial\nport:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("usermod")]),e._v(" -a -G dialout "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("\n")])])]),s("ul",[s("li",[s("p",[e._v("On the microSD card where you have flushed Raspbian:")]),e._v(" "),s("ul",[s("li",[e._v("Append the following line at the end of the the "),s("code",[e._v("/boot/cmdline.txt")]),e._v(" file\n(which will enable the serial option):")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("console=serial0,115200 console=tty1\n")])])]),s("ul",[s("li",[e._v("Append the following line at the end of the "),s("code",[e._v("/boot/config.txt")]),e._v(" file (which\nwill enable UART console during boot):")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("enable_uart=1\n")])])]),s("ul",[s("li",[e._v("Append the following line at the end of the "),s("code",[e._v("/root/etc/inittab")]),e._v(" file (which\nwill enable getty on serial):")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("T0:23:respawn:/sbin/getty -L ttyS0 115200 vt100\n")])])])]),e._v(" "),s("li",[s("p",[e._v("Finally boot the Raspberry Pi and use "),s("em",[e._v("minicom")]),e._v(" from your computer to connect:")])])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ minicom -b "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("115200")]),e._v(" -o -D /dev/ttyUSB0\n")])])]),s("ul",[s("li",[e._v("On your computer, some types of USB serial adapter may appear as "),s("code",[e._v("/dev/ttyACM0")]),e._v(",\nif so use:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ minicom -b "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("115200")]),e._v(" -o -D /dev/ttyACM0\n")])])]),s("blockquote",[s("p",[e._v("References:\n"),s("a",{attrs:{href:"https://elinux.org/RPi_Serial_Connection",target:"_blank",rel:"noopener noreferrer"}},[e._v("Raspberry Pi Serial Connection"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"troubleshooting-iot-device"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-iot-device"}},[e._v("#")]),e._v(" Troubleshooting IoT Device")]),e._v(" "),s("p",[e._v("Assuming you successfully logged in into your device, information about status,\nservices and apps can be found using the "),s("code",[e._v("systemctl")]),e._v(" utility.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Tip for Linux Starters")]),e._v(" "),s("p",[e._v("When walking around in a Linux terminal, you may find yourself in file reading\nmode (like after running "),s("code",[e._v("journalctl")]),e._v(" command), just type "),s("code",[e._v("q")]),e._v(" to quit.")])]),e._v(" "),s("h3",{attrs:{id:"troubleshooting-system-status"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-system-status"}},[e._v("#")]),e._v(" Troubleshooting System Status")]),e._v(" "),s("ul",[s("li",[e._v("To get the overall status of the device, run the command:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("If you are logged in as root, no need to prefix commands\nwith "),s("code",[e._v("sudo")]),e._v(".")])]),e._v(" "),s("h3",{attrs:{id:"troubleshooting-services-and-apps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-services-and-apps"}},[e._v("#")]),e._v(" Troubleshooting Services and Apps")]),e._v(" "),s("ul",[s("li",[e._v("To get the list of failed services on the device, run the command:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl --failed\n")])])]),s("ul",[s("li",[e._v("To get the status of services or apps, use the "),s("code",[e._v("status")]),e._v(" operation. For example,\nto get the status of "),s("code",[e._v("systemd-journald")]),e._v(" service:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status systemd-journald\n")])])]),s("ul",[s("li",[s("p",[e._v("To get the status of Ionoid.io SealOS managers, check the following services:")]),e._v(" "),s("ul",[s("li",[e._v("Status of main manager, run:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status sealos-manager\n")])])]),s("ul",[s("li",[e._v("Status of manager that executes and performs actions, run:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status sealos-manager-actions\n")])])])]),e._v(" "),s("li",[s("p",[e._v("To see if Ionoid.io SealOS manager boot setup succeededs, run the following\ncommand:")])])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status sealos-boot-setup\n")])])]),s("p",[e._v("You should see as output:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Main PID: 52 (code=exited, status=0/SUCCESS)\n")])])]),s("p",[e._v("If it's not the case, then something went wrong during initial Ionoid.io SealOS\nmanager boot setup.")]),e._v(" "),s("h3",{attrs:{id:"troubleshooting-iot-apps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-iot-apps"}},[e._v("#")]),e._v(" Troubleshooting IoT Apps")]),e._v(" "),s("p",[e._v("If you have deployed an app using the native format "),s("code",[e._v("tar")]),e._v(", "),s("code",[e._v("zip")]),e._v(" or\nanything that is not a "),s("em",[e._v("Docker Container/App")]),e._v(', then you can debug you app using\nthe following commands (we suppose that the app name is "hello-world"):')]),e._v(" "),s("ul",[s("li",[e._v("Get status of an app:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl status hello-world\n")])])]),s("ul",[s("li",[e._v("Get log entries of an app:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -u hello-world\n")])])]),s("h3",{attrs:{id:"troubleshooting-docker-iot-apps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting-docker-iot-apps"}},[e._v("#")]),e._v(" Troubleshooting Docker IoT Apps")]),e._v(" "),s("p",[e._v("If you have deployed Docker containers or apps then you can use the "),s("code",[e._v("Docker")]),e._v(" tools:")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("If docker commands do not work, run them with sudo.")])]),e._v(" "),s("ul",[s("li",[e._v("List all running docker apps and containers:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ps")]),e._v("\n")])])]),s("h3",{attrs:{id:"inspecting-device-logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inspecting-device-logs"}},[e._v("#")]),e._v(" Inspecting Device Logs")]),e._v(" "),s("p",[e._v("Information logs about device services and apps can be found using the "),s("code",[e._v("journalctl")]),e._v("\nwhich is part of\n"),s("a",{attrs:{href:"https://www.freedesktop.org/software/systemd/man/systemd-journald.service.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("systemd-journald"),s("OutboundLink")],1),e._v(",\nit only handles current boot logs as they are stored in a volatile way below\n"),s("code",[e._v("/run/log/journal/")]),e._v(", and they are cleaned at reboot.")]),e._v(" "),s("p",[e._v("The default system logger is "),s("a",{attrs:{href:"https://www.rsyslog.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rsyslog"),s("OutboundLink")],1),e._v(", to inspect the\npersistent logs, try to locate files under "),s("code",[e._v("/var/log/")]),e._v(" directory.")]),e._v(" "),s("h4",{attrs:{id:"kernel-logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kernel-logs"}},[e._v("#")]),e._v(" Kernel logs")]),e._v(" "),s("p",[e._v("To get the kernel logs use "),s("code",[e._v("dmesg")]),e._v(", the following asks for the last\n"),s("code",[e._v("100 log entries")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("dmesg")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tail")]),e._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("\n")])])]),s("h4",{attrs:{id:"system-logs-with-rsyslog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-logs-with-rsyslog"}},[e._v("#")]),e._v(" System logs with "),s("code",[e._v("rsyslog")])]),e._v(" "),s("p",[e._v("For further documentation on "),s("a",{attrs:{href:"https://www.rsyslog.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rsyslog"),s("OutboundLink")],1),e._v(" see "),s("a",{attrs:{href:"https://www.rsyslog.com/category/guides-for-rsyslog/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rsyslog\nguides"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("To list all system logs that were handled by rsyslog, and inspect current and previous boot logs:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -lha /var/log/syslog*\n")])])]),s("h4",{attrs:{id:"system-logs-with-systemd-journald"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-logs-with-systemd-journald"}},[e._v("#")]),e._v(" System logs with "),s("code",[e._v("systemd-journald")])]),e._v(" "),s("ul",[s("li",[e._v("To get the system logs of the current boot:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b\n")])])]),s("ul",[s("li",[e._v("To get the last 10 entries of system logs of the current boot:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -n "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n")])])]),s("ul",[s("li",[e._v("To follow in realtime system logs of the current boot:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -f\n")])])]),s("ul",[s("li",[e._v("To check the logs of a Ionoid.io manager "),s("code",[e._v("sealos-manager")]),e._v(" agent:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# examples")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -u sealos-manager\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -u sealos-manager-actions\n")])])]),s("ul",[s("li",[e._v("To check the logs of your service or app, for example the "),s("em",[e._v("hello-world")]),e._v(" app:")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" journalctl -b -u hello-world\n")])])]),s("Content",{attrs:{"page-key":e.getPageKey(e.$site.pages,"/docs/_have-questions.html")}})],1)}),[],!1,null,null,null);t.default=o.exports}}]);