(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{386:function(e,t,a){"use strict";a.r(t);var s=a(45),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"linux-iot-and-edge-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-iot-and-edge-apps"}},[e._v("#")]),e._v(" Linux IoT and Edge Apps")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ionoid.io"),a("OutboundLink")],1),e._v(" IoT and Edge Linux apps are archive files that\nbundle the application, libraries, files and other dependencies. Using some of\n"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/List_of_Linux_containers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux Containers Technology"),a("OutboundLink")],1),e._v(" to implement file system\nisolation, devices are able to run multiple applications isolated from one\nanother.")]),e._v(" "),a("p",[e._v("Installed apps are located on device storage at:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/data/apps/store/\n")])])]),a("p",[e._v("For every application, there will be a corresponding directory:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/data/apps/store/appname\n")])])]),a("p",[e._v("All files corresponding to an app are located under its path. This makes\nit easy to stop, "),a("strong",[e._v("disable")]),e._v(", or completely remove applications.")]),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("h3",{attrs:{id:"iot-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iot-apps"}},[e._v("#")]),e._v(" IoT Apps")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ionoid.io"),a("OutboundLink")],1),e._v(" supports multiple IoT app formats:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Static binaries without libraries or other filesystem dependencies.\nIf you are deploying "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_build",target:"_blank",rel:"noopener noreferrer"}},[e._v("Static\nBinaries"),a("OutboundLink")],1),e._v(" then please keep\nreading this document. Static binaries will have an auto generated\n"),a("a",{attrs:{href:"#app-yaml-format"}},[e._v("App YAML file")]),e._v(".")])]),e._v(" "),a("li",[a("p",[e._v("Archive\n"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tar_(computing)",target:"_blank",rel:"noopener noreferrer"}},[e._v("tarball"),a("OutboundLink")],1),e._v(" or\ncompressed "),a("code",[e._v("tar.gz")]),e._v(" apps. The archive\nfiles are standard files format that were released several years ago, they\nare well supported and the tools to process them are all Open Source tools.\nIf you are deploying Archive apps then please keep reading this\ndocument. Archive apps must include an "),a("a",{attrs:{href:"#app-yaml-format"}},[e._v("App YAML file")]),e._v("\nthat describes how the application will run.")])]),e._v(" "),a("li",[a("p",[e._v("Modern "),a("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker"),a("OutboundLink")],1),e._v(" containers ("),a("em",[e._v("in progress -\nwill be released soon")]),e._v("). If you are deploying "),a("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker container"),a("OutboundLink")],1),e._v(" apps then please go directly to this link "),a("a",{attrs:{href:"#docker-apps"}},[e._v("docker apps")]),e._v(".")])])]),e._v(" "),a("Content",{attrs:{"page-key":e.getPageKey(e.$site.pages,"/docs/_build-archive-apps-with-docker.html")}}),e._v(" "),a("h3",{attrs:{id:"app-yaml-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#app-yaml-format"}},[e._v("#")]),e._v(" App YAML Format")]),e._v(" "),a("p",[e._v("Each app is described using The App YAML format. The App yaml is\na simple manifest to describe how the app should work, it is fully\ndescribed in the "),a("code",[e._v("app.yaml")]),e._v(" file (see next section), and only works with\napps that are static binaries or archive apps.")]),e._v(" "),a("p",[e._v("Docker apps do not need the "),a("code",[e._v("app.yaml")]),e._v(" file, they already\ncontain their own app manifest and are auto handled withing their\nappropriate agents.\nVisit this link for "),a("a",{attrs:{href:"#docker-apps"}},[e._v("docker apps")]),e._v(" for more information.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("app.yaml")]),e._v(" file should be present in the root directory of an\narchive file. Every app must have its corresponding "),a("code",[e._v("app.yaml")]),e._v(" file.\nFor "),a("a",{attrs:{href:"#static-binaries"}},[e._v("static binaries")]),e._v(" with no dependencies, an\n"),a("code",[e._v("app.yaml")]),e._v(" file will be auto-generated on the fly to define how the\napp should run.")]),e._v(" "),a("p",[e._v("App YAML file example:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: lines starting with `#` are comments and have no semantics.")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Name of APP must be unique on the device.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Only alphanumeric + the special "_", "." and "-" characters are allowed.')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Minimum 2 characters, up to 64 characters.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mendatory field.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" appname\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Version of App to be deployed")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mendatory field.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Description of App")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" My App\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# List of Applications inside the same IoT App archive, for now we only")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# support one single app. Support of multiple apps inside will be added in")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the future.")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# App hello-world entry, must be Alphanumeric and may contain the")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# special characters "_", "." and "-".')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Minimum 2 characters, up to 64 characters.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mendatory field.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hello-world")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Environment Vars for Hello World Optional")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ABC"')]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Semilar to environment but reads the environment variables")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from a text file. The text file should contain new-line-separated")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# variable assignments.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("environmentfiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/etc/hello-world-environment1"')]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/etc/hello-world-environment2"')]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Optional command to be executed before the main executable app.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Can be used to setup environment.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("start-command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/echo hello\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mendatory field: the full path of the main application")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Optional command to be executed after the main app finishes")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Can be used to clean up state.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("stop-command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/echo stopped\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Daemon Command type takes one of these values:")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * simple:     the process configured with command")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               is the main process of the service.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               This is the default value if daemon is")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               not set.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * forking:    it is expected that the process configured")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               with command will call fork() as part")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               of its start-up.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# * oneshot:    it is expected that the process configured")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#               with command will exit or terminate.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For more details check systemd service documentation.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("daemon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" simple "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" forking "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("|")]),e._v(" oneshot\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make the application run with root privileges if you want")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to access special devices and ports on your hardware that")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# need special permissions. By default it is false, and the")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# app will run as `ionoid-app` user.")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("privileged")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[e._v("true")]),e._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Volumes and mounts to be made accessible inside the application.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Volumes support two types of mount 'rbind' and 'norbind':")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * rbind: perform a recursive bind mount of the volume.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * norbind: perform a non-recusive bind mount.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Volumes support different options:")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * rw: perform a regular writable bind mount (unless source is read-only).")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   * ro: perform a read-only bind mount.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" src=filesystem_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("dst=app_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("type=rbind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("options=rw\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" src=filesystem_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("dst=app_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("type=norbind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("options=ro\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# /dev, /proc and /sys are already mounted inside the app")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# no need to mount them again.")]),e._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mounting device host /etc configuration inside the app:")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" src=/etc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("dst=/etc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("type=rbind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("options=ro\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If you want to make the root-filesystem available then the")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# following volume mount is the safest instruction.")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v(" src=/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("dst=/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("type=norbind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("options=ro\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Health check is a special command to do health checking on")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# your one or multiple apps")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# still under development")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("health-check")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("        /bin/health"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("check\n")])])]),a("p",[e._v("The "),a("code",[e._v("health-check")]),e._v(" field is a special directive that may allow you to do\nhealth checks on your running apps. Right now it is "),a("strong",[e._v("in progress - still under\ndevelopment")]),e._v(".")]),e._v(" "),a("p",[e._v("The "),a("strong",[e._v("Hello World app")]),e._v(" ("),a("a",{attrs:{href:"https://storage.googleapis.com/public.opendevices.io/apps/arch/armv7/hello-world/hello-world-armv7-v0.1.tar",target:"_blank",rel:"noopener noreferrer"}},[e._v("ARMv7"),a("OutboundLink")],1),e._v("\n, "),a("a",{attrs:{href:"https://storage.googleapis.com/public.opendevices.io/apps/arch/armv6/hello-world/hello-world-armv6-v0.1.tar",target:"_blank",rel:"noopener noreferrer"}},[e._v("ARMv6"),a("OutboundLink")],1),e._v("\n) is an exemple of a simple IoT app. The content of the "),a("code",[e._v("app.yaml")]),e._v(" file is:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hello-world")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n")])])]),a("h3",{attrs:{id:"app-persist-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#app-persist-data"}},[e._v("#")]),e._v(" App Persist Data")]),e._v(" "),a("p",[e._v("If you want to persist your data on the device and share it with other\napplications and the rest of the system, then this can be easily done by\nwriting to the "),a("code",[e._v("/shared/$myappname")]),e._v(" directory volume. Every application has by\ndefault the "),a("code",[e._v("/shared/$myappname")]),e._v(" volume mounted and available inside its\nfilesystem.")]),e._v(" "),a("p",[e._v("From the application point of view, shared data is located at:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/shared/"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$myappname")]),e._v("\n")])])]),a("p",[e._v("From the rest of the system point of view, shared data is located at:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/data/apps/shared/"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$myappname")]),e._v("\n")])])]),a("p",[e._v("The "),a("code",[e._v("/shared/$myappname")]),e._v(" directory is "),a("strong",[e._v("world readable and accessible")]),e._v("\nto the system. If you write secret files there, then make sure to set the\nappropriate access permissions, especially if your device is used by non-trusted\nthird parties.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("/shared/$myappaname")]),e._v(" directory is owned by:")]),e._v(" "),a("ul",[a("li",[e._v("User "),a("code",[e._v("ionoid-app")]),e._v(": meaning that all applications running with that "),a("em",[e._v("User ID")]),e._v("\ncan write to it.")]),e._v(" "),a("li",[e._v("Group "),a("code",[e._v("ionoid-app")]),e._v(": meaning that all applications running with that "),a("em",[e._v("Group ID")]),e._v("\ncan write to it and share data.")])]),e._v(" "),a("p",[e._v("Volumes and mounts are the preferred mechanism to persist data on the\ndevice by applications and share it with others.")]),e._v(" "),a("h2",{attrs:{id:"static-binaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-binaries"}},[e._v("#")]),e._v(" Static Binaries")]),e._v(" "),a("p",[e._v("Static binaries are apps without libraries or other filesystem\ndependencies. Please visit "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Static_build",target:"_blank",rel:"noopener noreferrer"}},[e._v("wikipedia Static\nBinaries"),a("OutboundLink")],1),e._v(" link to read more\nabout it.")]),e._v(" "),a("p",[e._v("Building static binaries differs from one language and environment to another,\nthe following documentation will try to help you get started with it.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("The target OS here is of course "),a("code",[e._v("Linux")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"golang-static-binaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#golang-static-binaries"}},[e._v("#")]),e._v(" Golang Static Binaries")]),e._v(" "),a("p",[e._v("Before we start with our steps on how to produce static binaries from\n"),a("a",{attrs:{href:"https://fr.wikipedia.org/wiki/Go_(langage)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Golang"),a("OutboundLink")],1),e._v(" sources, let's see some\nvariables and environments that we have to set, this will allows us to really\nproduce statically linked binaries:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("CGO_ENABLED=0")]),e._v(" Instruct compiler to disable CGO and statically link C\nbindings.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("GOOS=linux")]),e._v(" Our target Operating System is Linux.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("GOARCH=$arch")]),e._v(" Our target board architecure. If in doubts please visit\nour "),a("a",{attrs:{href:"https://docs.ionoid.io/#/../NewProject/newProject?id=supported-boards-and-operating-systems-table",target:"_blank",rel:"noopener noreferrer"}},[e._v("Supported boards\nTable"),a("OutboundLink")],1),e._v(".\nCurrent supported values for "),a("code",[e._v("$arch")]),e._v(" are "),a("code",[e._v("amd64")]),e._v(", "),a("code",[e._v("arm")]),e._v(" or "),a("code",[e._v("arm64")]),e._v(".")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("GOARM=$version")]),e._v(" If the target board architecture is "),a("code",[e._v("arm")]),e._v(" then you have\nto set the "),a("code",[e._v("GOARM")]),e._v(" or the "),a("em",[e._v("machine variable")]),e._v(". Current supported values\nare "),a("code",[e._v("6")]),e._v(" or "),a("code",[e._v("7")]),e._v(". For a detailed explanation please visit the official\n"),a("a",{attrs:{href:"https://github.com/golang/go/wiki/GoArm",target:"_blank",rel:"noopener noreferrer"}},[e._v("Golang ARM Wiki"),a("OutboundLink")],1),e._v(".")])])]),e._v(" "),a("p",[e._v("Here is how to build Golang static binaries for each architecture:")]),e._v(" "),a("ul",[a("li",[e._v("ARMv6")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CGO_ENABLED")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOOS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("linux "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOARCH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("arm "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOARM")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  go build -tags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'osusergo netgo'")]),e._v(" -ldflags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-extldflags \"-static\"'")]),e._v(" main.go\n")])])]),a("ul",[a("li",[e._v("ARMv7")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CGO_ENABLED")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOOS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("linux "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOARCH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("arm "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOARM")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  go build -tags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'osusergo netgo'")]),e._v(" -ldflags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-extldflags \"-static\"'")]),e._v(" main.go\n")])])]),a("ul",[a("li",[e._v("amd64")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CGO_ENABLED")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOOS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("linux "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("GOARCH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("amd64 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  go build -tags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'osusergo netgo'")]),e._v(" -ldflags "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'-extldflags \"-static\"'")]),e._v(" main.go\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("More Static Binaries")]),e._v(" "),a("p",[e._v("Support for static binaries from other languages is under development and will\nbe added soon.")])]),e._v(" "),a("h3",{attrs:{id:"deploy-static-binaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-static-binaries"}},[e._v("#")]),e._v(" Deploy Static Binaries")]),e._v(" "),a("p",[e._v("When deploying static binaries with "),a("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ionoid.io"),a("OutboundLink")],1),e._v(", there is\nno need to put it inside docker or write an "),a("code",[e._v("app.yaml")]),e._v(" file for it. If your\napplication has no external dependencies on files or other\napplications, just upload it to the internet and point Ionoid.io\nto its deployment URL.")]),e._v(" "),a("p",[e._v("An "),a("code",[e._v("app.yaml")]),e._v(" file will be auto-generated on the fly at the devices\nlevel using the following format:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" $myappname\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" $unixtimestamp\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("$myappname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/$myappname\n")])])]),a("h4",{attrs:{id:"example-of-a-generated-app-yaml-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-of-a-generated-app-yaml-file"}},[e._v("#")]),e._v(" Example of a generated "),a("code",[e._v("app.yaml")]),e._v(" file")]),e._v(" "),a("p",[e._v("Given the "),a("em",[e._v("hello-world")]),e._v(" example app (visit "),a("a",{attrs:{href:"https://github.com/ionoid-io-projects/apps/tree/master/hello-world",target:"_blank",rel:"noopener noreferrer"}},[e._v("this link"),a("OutboundLink")],1),e._v(" to find\nthe complete source files and binaries of the app), the auto-generated\n"),a("code",[e._v("app.yaml")]),e._v(" file will be:")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1583693787")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hello-world")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("  /bin/hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n")])])]),a("p",[e._v("Where:")]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("hello-world")]),e._v(" is the the last resource file name from the URL path.\nFor example that taken from the followinf URL\n"),a("code",[e._v("https://github.apps.ionoid.net/hello-world/arm6/build/bin/hello-world")])])]),e._v(" "),a("li",[a("p",[a("em",[e._v("1583693787")]),e._v(" is the Unix timestamp at the moment of deployment.")])])]),e._v(" "),a("p",[e._v("To deploy your static binaries, upload them to the internet, and point the\ndeployment URL to the right one:")]),e._v(" "),a("p",[a("img",{attrs:{src:"/steps/projects-and-devices/app-deployment.png",alt:"Deploy Static Binary"}})]),e._v(" "),a("p",[e._v("For more examples please visit our hosted sample apps here: "),a("a",{attrs:{href:"https://github.apps.ionoid.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ionoid.io\nSample Apps"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("More robust deployment methods are being developed, they will be added soon.")])]),e._v(" "),a("h2",{attrs:{id:"archive-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#archive-apps"}},[e._v("#")]),e._v(" Archive Apps")]),e._v(" "),a("p",[e._v("Archive apps are compressed files in\n"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tar_(computing)",target:"_blank",rel:"noopener noreferrer"}},[e._v("tar"),a("OutboundLink")],1),e._v(" or\n"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Zip_(file_format)",target:"_blank",rel:"noopener noreferrer"}},[e._v("zip"),a("OutboundLink")],1),e._v(" formats. They are\ncomposed of the following parts:")]),e._v(" "),a("ul",[a("li",[e._v("The "),a("code",[e._v("app.yaml")]),e._v(" file: it encodes the basic information of the app")]),e._v(" "),a("li",[e._v("The "),a("code",[e._v("bin/")]),e._v(" directory: it is the binary directory where the app resides")]),e._v(" "),a("li",[e._v("The "),a("code",[e._v("meta/")]),e._v(" directory (Optional): it contains extra app metadata")]),e._v(" "),a("li",[e._v("Other files and/or directories (Optional): it consists of the rest of app\nfile system and other dependency files.")])]),e._v(" "),a("p",[e._v("The content of the "),a("code",[e._v("app.yaml")]),e._v(" file would be (as in the\n"),a("a",{attrs:{href:"https://github.com/ionoid/docs-examples/blob/master/archives/hello-world-armv7-v0.2.tar?raw=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("IoT App Golang Hello World"),a("OutboundLink")],1),e._v("\nfor example):")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("apps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("hello-world")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" /bin/hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("world\n")])])]),a("p",[e._v("Since archive apps are archive files that contain the app and its dependencies,\nthere are several Open Source based methods to build such archive files.\nThe following sections details this with real examples.")]),e._v(" "),a("h3",{attrs:{id:"minimal-archive-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimal-archive-apps"}},[e._v("#")]),e._v(" Minimal Archive Apps")]),e._v(" "),a("p",[e._v("The following is a minimal simple way to build archive apps, these steps describe\nhow to manually build the previous "),a("a",{attrs:{href:"https://github.com/ionoid/docs-examples/blob/master/archives/hello-world-armv7-v0.2.tar?raw=true",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hello World IoT App"),a("OutboundLink")],1),e._v(" example for "),a("code",[e._v("ARMv7")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("Create the app directory "),a("code",[e._v("hello-world")]),e._v(":")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" hello-world\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" hello-world\n")])])]),a("p",[e._v("1 - Populate the app directory with "),a("code",[e._v("app.yaml")]),e._v(" and executable files:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("hello-world\n├── app.yaml\n└── bin\n    └── hello-world\n")])])]),a("p",[e._v("2 - Generate the app tar archive, in the following example, we assume we build\nfor ARMv7 so we make it clear in the file name:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" cvvf hello-world-armv7-v0.2.tar -C hello-world --transform"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s,^./,,'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),a("p",[e._v("3 - The "),a("code",[e._v("hello-world-armv7-v0.2.tar")]),e._v(" is our final app that can be deployed to\nIoT Devices")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("When generating the app archive, it can be compressed to save deployment data\nusage with the following command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" czvf hello-world-armv7-v0.2.tar.gz -C hello-world --transform"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s,^./,,'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])])]),e._v(" "),a("h3",{attrs:{id:"docker-archive-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-archive-apps"}},[e._v("#")]),e._v(" Docker Archive Apps")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),a("OutboundLink")],1),e._v(" offers the necessary tooling to build containers,\nthen export them as archive apps. This laverages IoT and Edge apps to be as\nsimple as possible using the "),a("a",{attrs:{href:"#app-yaml-format"}},[e._v("App YAML file")]),e._v(", while at the\nsame time offers the unique way to run apps without including complex containers\nfeautres that are more suited for the cloud.")]),e._v(" "),a("p",[e._v("Please refer to the next chaper "),a("a",{attrs:{href:"https://docs.ionoid.io/docs/build-iot-archive-apps.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Build IoT and Edge Apps"),a("OutboundLink")],1),e._v(" to see how to take\nadvantage of docker, export and build archive apps.")]),e._v(" "),a("h3",{attrs:{id:"mkiot-archive-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mkiot-archive-apps"}},[e._v("#")]),e._v(" Mkiot Archive Apps")]),e._v(" "),a("p",[a("a",{attrs:{href:"#make-iot-apps"}},[e._v("Make IoT Apps")]),e._v(" is our standard method to build lightweight self\ncontained IoT and Edge apps. For more details, please refer to the next chapter\n"),a("a",{attrs:{href:"https://docs.ionoid.io/docs/build-iot-archive-apps.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Build IoT and Edge Apps"),a("OutboundLink")],1),e._v(" to build IoT archive\napps using "),a("a",{attrs:{href:"https://github.com/ionoid/mkiot",target:"_blank",rel:"noopener noreferrer"}},[e._v("mkiot"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"debian-deboostrap-apps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debian-deboostrap-apps"}},[e._v("#")]),e._v(" Debian deboostrap Apps")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://wiki.debian.org/Debootstrap",target:"_blank",rel:"noopener noreferrer"}},[e._v("Debian debootstrap"),a("OutboundLink")],1),e._v(" is an Open Source tool\nto bootstrap a basic Debian image. The application, its bundles and the\n"),a("code",[e._v("app.yaml")]),e._v(" file should all be added to the Debian image that will be used to\ngenerate the artifact tarball.")]),e._v(" "),a("h2",{attrs:{id:"docker-containers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-containers"}},[e._v("#")]),e._v(" Docker containers")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://ionoid.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ionoid.io"),a("OutboundLink")],1),e._v(" supports "),a("a",{attrs:{href:"https://docker.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("docker"),a("OutboundLink")],1),e._v(" containers\nand apps that are handled directly by docker.")]),e._v(" "),a("p",[a("strong",[e._v("This will be released soon.")])]),e._v(" "),a("Content",{attrs:{"page-key":e.getPageKey(e.$site.pages,"/docs/_have-questions.html")}})],1)}),[],!1,null,null,null);t.default=n.exports}}]);